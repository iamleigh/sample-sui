"use strict";(self.webpackChunkshared_ui=self.webpackChunkshared_ui||[]).push([[416],{"./packages/react/sui-hooks/src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{st:()=>useBottomEnd,d7:()=>useDebounce,Q8:()=>useDefaultChildren,L2:()=>useRtlDetect_useDetectRTL,Mj:()=>useInteraction,xk:()=>useOuterClick,WP:()=>usePortal,ZC:()=>usePrevious,IS:()=>useStyles,eo:()=>useValidateProps});var react=__webpack_require__("./node_modules/react/index.js");const useRtlDetect_useDetectRTL=()=>{const[isRTL,setIsRTL]=(0,react.useState)(!1);return(0,react.useEffect)((()=>{const updateRTL=()=>{const isDocumentRTL="rtl"===document.documentElement.getAttribute("dir");setIsRTL(isDocumentRTL)};updateRTL();const mutationObserver=new MutationObserver(updateRTL);return mutationObserver.observe(document.documentElement,{attributes:!0,attributeFilter:["dir"]}),()=>{mutationObserver.disconnect()}}),[]),isRTL},useOuterClick=(ref,callback=()=>{})=>{const onPageClick=(0,react.useCallback)((event=>{ref?.current&&!ref?.current.contains(event.target)&&callback()}),[callback,ref]);(0,react.useEffect)((()=>(document.addEventListener("click",onPageClick),()=>{document.removeEventListener("click",onPageClick)})))},useBottomEnd=(onBottomReach=()=>{})=>({handleScroll:e=>{const{scrollHeight,scrollTop,clientHeight}=e?.target??{};scrollHeight-scrollTop===clientHeight&&onBottomReach()}});var react_dom=__webpack_require__("./node_modules/react-dom/index.js");const usePortal=wrapperId=>{const[wrapperElement,setWrapperElement]=(0,react.useState)(null);wrapperId=wrapperId??".sui-wrap",(0,react.useLayoutEffect)((()=>{let el=document.querySelector(wrapperId),systemCreated=!1;return el||(systemCreated=!0,el=(wrapperId=>{const wrapperElement=document.createElement("div");return wrapperElement.setAttribute("id",wrapperId),document.body.appendChild(wrapperElement),wrapperElement})(wrapperId)),setWrapperElement(el),()=>{systemCreated&&el?.parentNode&&el.parentNode.removeChild(el)}}),[wrapperId]),(0,react.useEffect)((()=>{const mountNode=document.createElement("div");return mountNode.setAttribute("data-testid","portal-root"),document.body.appendChild(mountNode),()=>{mountNode.remove()}}),[]);return[children=>null===wrapperElement?null:(0,react_dom.createPortal)(children,wrapperElement)]};var emotion_css_create_instance_esm=__webpack_require__("./node_modules/@emotion/css/create-instance/dist/emotion-css-create-instance.esm.js"),src=__webpack_require__("./packages/react/sui-utils/src/index.ts");const breakpointsMap={default:null,sm:600,md:1024,lg:1200,xl:1600},CSS_SHORTHAND_MAPS={p:"padding",px:"padding",py:"padding",pt:"paddingTop",pr:"paddingRight",pb:"paddingBottom",pl:"paddingLeft",m:"margin",mx:"margin",my:"margin",mt:"marginTop",mr:"marginRight",mb:"marginBottom",ml:"marginLeft"},parentSelector="body #sui-wrap &",buildStyleSheet=(propName,value,existingStyles)=>{const shorthandPropName=CSS_SHORTHAND_MAPS[propName]??propName,buildSingleValue=val=>({[shorthandPropName]:val}),buildMediaQueries=(val,pos,acc)=>{const size=breakpointsMap[pos];if(null===val)return acc;const styleVal=buildSingleValue(val);if("default"===pos)return{...acc,...styleVal};const prevSize=(pos=>{switch(pos){case"xl":return breakpointsMap.lg;case"lg":return breakpointsMap.md;case"md":return breakpointsMap.sm;default:return}})(pos),query="sm"!==pos?`@media(min-width:${(prevSize??0)+1}px) and (max-width:${size}px)`:`@media(max-width:${size}px)`;return{...acc,[query]:{...acc[query],...existingStyles?.[query]??{},...styleVal}}};switch(typeof value){case"string":return buildSingleValue(value);case"object":return(0,src.I8)(propName)?buildSingleValue(value):Object.keys(value).reduce(((acc,pos)=>({...acc,...buildMediaQueries(value[pos],pos,acc)})),{});default:return{}}},{css}=(0,emotion_css_create_instance_esm.A)({key:"sui-inline"}),useStyles=(styleProps={},attachWith="")=>{const[calculatedStyles,setCalculatedStyles]=(0,react.useState)({}),classNames=(styleObject=calculatedStyles,(0,src.ZF)(styleObject)?"":css(styleObject));var styleObject;const stringifiedStyles=JSON?.stringify((0,src.b1)()?{}:styleProps);return(0,react.useEffect)((()=>{const styleObject=JSON.parse(stringifiedStyles);let generatedCSS={};if(!(0,src.ZF)(styleObject)){for(const name of Object.keys(styleObject)){const val=styleObject[name];generatedCSS={...generatedCSS,...buildStyleSheet(name,val,generatedCSS)}}setCalculatedStyles({[parentSelector]:generatedCSS})}}),[stringifiedStyles]),{suiInlineClassname:(0,src.eX)(attachWith,{},classNames??"")}},useDebounce=(value,delay,onChange=()=>{})=>{const[debouncedValue,setDebouncedValue]=(0,react.useState)(value);return(0,react.useEffect)((()=>{const handler=setTimeout((()=>{setDebouncedValue(value),onChange()}),delay);return()=>{clearTimeout(handler)}}),[value,delay,onChange]),debouncedValue},usePrevious=value=>{const ref=(0,react.useRef)(void 0);return(0,react.useEffect)((()=>{ref.current=value}),[value]),ref.current},useDefaultChildren=(children,content)=>null!==children?children:content||"{children content}",useInteraction=(methods={})=>{const[isHovered,setIsHovered]=(0,react.useState)(!1),[isFocused,setIsFocused]=(0,react.useState)(!1),{onMouseEnter,onMouseLeave,onMouseDownCapture,onMouseUp,onMouseUpCapture,onFocus,onBlur,onBlurCapture}=methods,toggleHover=(0,react.useCallback)((state=>{setIsHovered(state)}),[]),toggleFocus=(0,react.useCallback)((state=>{setIsFocused(state)}),[]);return[isHovered,isFocused,{onMouseUp:(0,react.useCallback)((e=>{e.currentTarget.focus(),toggleFocus(!0),onMouseUp?.(e)}),[onMouseUp,toggleFocus]),onMouseEnter:(0,react.useCallback)((e=>{toggleHover(!0),onMouseEnter?.(e)}),[onMouseEnter,toggleHover]),onMouseLeave:(0,react.useCallback)((e=>{toggleHover(!1),onMouseLeave?.(e)}),[onMouseLeave,toggleHover]),onMouseDownCapture:(0,react.useCallback)((e=>{toggleFocus(!1),onMouseDownCapture?.(e)}),[onMouseDownCapture,toggleFocus]),onMouseUpCapture:(0,react.useCallback)((e=>{toggleFocus(!0),onMouseUpCapture?.(e)}),[onMouseUpCapture,toggleFocus]),onFocus:(0,react.useCallback)((e=>{toggleFocus(!0),onFocus?.(e)}),[onFocus,toggleFocus]),onBlur:(0,react.useCallback)((e=>{toggleFocus(!1),onBlur?.(e)}),[onBlur,toggleFocus]),onBlurCapture:(0,react.useCallback)((e=>{toggleHover(!1),onBlurCapture?.(e)}),[onBlurCapture,toggleHover])},toggleHover,toggleFocus]},useValidateProps=({propsToCheck,component})=>{const componentName=component?.displayName||component?.name;Object.keys(propsToCheck)?.forEach((propKey=>{if(!!(0,src.Im)(propsToCheck?.[propKey]??""))throw new Error(`Empty content is not valid. More details below:\n\n⬇️ ⬇️ ⬇️\n\n📦 SUI 3 React - Components: ${componentName}\n\nThe "${propKey}" argument requires some value to be passed to it.\n\n`)}))}}}]);