"use strict";(self.webpackChunkshared_ui=self.webpackChunkshared_ui||[]).push([[488],{"./packages/react/elements/sui-checkbox/src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Eh:()=>CheckBoxGroups,Sc:()=>Checkbox,$Q:()=>CheckboxGroup});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/react/index.js"),src=__webpack_require__("./packages/react/sui-utils/src/index.ts"),sui_hooks_src=__webpack_require__("./packages/react/sui-hooks/src/index.ts");const CheckboxContext=(0,react.createContext)({items:[],setItems:()=>{},onChange:()=>{}}),CheckboxProvider=({children,onChange})=>{const[items,setItems]=(0,react.useState)([]),handleOnChange=(0,react.useCallback)(((id,isChecked,groupId)=>{"string"==typeof id&&setItems((prevItems=>{const updatedItem={id,groupId,isChecked},existingIndex=prevItems.findIndex((item=>item.id===id&&item.groupId===groupId)),nextItems=[...prevItems];return existingIndex>-1?nextItems[existingIndex]=updatedItem:nextItems.push(updatedItem),onChange&&onChange(nextItems),nextItems}))}),[onChange]);return(0,jsx_runtime.jsx)(CheckboxContext.Provider,{value:{items,setItems,onChange:handleOnChange},children})},useCheckbox=()=>{const ctx=(0,react.useContext)(CheckboxContext);if(!ctx)throw new Error("useCheckbox must be used within a <CheckboxContextProvider>");return{...ctx,onChange:(id,isChecked,groupId)=>{ctx?.onChange?.(id,isChecked,groupId)},addToList:(id,isChecked,groupId)=>{ctx?.onChange?.(id,isChecked,groupId)}}},Tick=({...props})=>(0,jsx_runtime.jsx)("span",{...(0,src.X5)(props),children:(0,jsx_runtime.jsx)("svg",{viewBox:"0 0 12 10",fill:"none",className:"sui-checkbox__icon",children:(0,jsx_runtime.jsx)("path",{d:"M4.23784 9.08831L0.337838 5.16588C0.103533 4.93023 0.103533 4.54815 0.337838 4.31247L1.18635 3.45906C1.42065 3.22338 1.80057 3.22338 2.03488 3.45906L4.66211 6.10137L9.96507 0.91168C10.1994 0.676028 10.5793 0.676028 10.8136 0.91168L11.6621 1.76509C11.8964 2.00074 11.8964 2.38283 11.6621 2.6185L5.08637 9.08833C4.85205 9.32398 4.47215 9.32398 4.23784 9.08831Z"})})}),Unknown=({...props})=>(0,jsx_runtime.jsx)("span",{...(0,src.X5)(props),children:(0,jsx_runtime.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"10",height:"2",viewBox:"-1 0 12 3",fill:"none",className:"sui-checkbox__icon",children:(0,jsx_runtime.jsx)("path",{d:"M9.7 0H0.3C0.134315 0 0 0.134315 0 0.3V1.7C0 1.86569 0.134315 2 0.3 2H9.7C9.86569 2 10 1.86569 10 1.7V0.3C10 0.134315 9.86569 0 9.7 0Z",fill:"white"})})}),Checkbox=({id,groupId="",name,value="",label,isLabelHidden=!1,isChecked=!1,isDisabled=!1,isSmall=!1,isError=!1,isIndeterminate=!1,onChange:propOnchange=()=>{},validate,validateOnMount,_htmlProps={},_style})=>{const ctx=useCheckbox(),[isHovered,isFocused,methods]=(0,sui_hooks_src.Mj)({}),{suiInlineClassname}=(0,sui_hooks_src.IS)(_style);let uuid=`sui-checkbox-${(0,react.useId)()}`;id&&(uuid=id),(0,react.useEffect)((()=>{ctx?.addToList(id,isChecked,groupId)}),[id,groupId,isChecked]);const inputProps={id:uuid,type:"checkbox",name,value,className:"sui-accessible-cta sui-checkbox__input",checked:isChecked,disabled:isDisabled,onChange:e=>{isDisabled||(ctx?.onChange?.(uuid,e.target.checked,groupId),validate?.(e.target.checked),propOnchange?.(e))},"aria-labelledby":`${uuid}-label`,..._htmlProps};(0,react.useEffect)((()=>{validateOnMount&&validate?.(isChecked)}),[]);const containerProps={className:(0,src.eX)("sui-checkbox",{"hidden-label":isLabelHidden,indeterminate:isIndeterminate,hover:isHovered,focus:isFocused,disabled:isDisabled,checked:isChecked,sm:isSmall,error:isError},suiInlineClassname),...methods},boxProps={className:"sui-checkbox__box","aria-hidden":!0};return(0,jsx_runtime.jsxs)("label",{...containerProps,id:`${uuid}-label`,htmlFor:uuid,tabIndex:-1,"data-testid":"checkbox",children:[(0,jsx_runtime.jsx)("input",{"aria-label":"string"==typeof label&&label||"checkbox",...(0,src.X5)(inputProps),"data-testid":"checkbox-input"}),isIndeterminate?(0,jsx_runtime.jsx)(Unknown,{...boxProps}):(0,jsx_runtime.jsx)(Tick,{...boxProps,tabIndex:-1}),isLabelHidden?(0,jsx_runtime.jsx)("span",{className:"sui-screen-reader-only",children:label}):(0,jsx_runtime.jsx)("span",{className:"sui-checkbox__label",children:label})]})},CheckboxGroupInner=({hasSubItems,title,children,commonCheckboxProps,isInline,id,_style})=>{const[isFirstRender,setIsFirstRender]=(0,react.useState)(!0),{items,setItems}=useCheckbox(),uuid=(0,react.useId)(),{suiInlineClassname}=(0,sui_hooks_src.IS)(_style),checkboxGroupId=id??`sui-checkbox-group-${uuid}`,className=(0,src.eX)("sui-checkbox__group",{nested:hasSubItems,inline:isInline},suiInlineClassname),group=items.filter((item=>item.groupId===checkboxGroupId)),checkedItemsCount=group?.filter((i=>i.isChecked)).length,allChecked=checkedItemsCount===group.length,hasCheckedItems=checkedItemsCount>0,onCheckboxChange=(0,react.useCallback)((()=>{const toUpdate=[];items.forEach((item=>{item.groupId===checkboxGroupId?toUpdate.push({...item,isChecked:!allChecked||!allChecked&&checkedItemsCount>0}):toUpdate.push(item)})),setItems([...toUpdate])}),[items,allChecked,checkedItemsCount,checkboxGroupId,setItems]);return(0,react.useEffect)((()=>{setIsFirstRender(!1)}),[]),(0,jsx_runtime.jsxs)("div",{className,children:[hasSubItems&&(0,jsx_runtime.jsx)(Checkbox,{...commonCheckboxProps,id:checkboxGroupId,label:title??"",isChecked:allChecked&&hasCheckedItems,onChange:onCheckboxChange,isIndeterminate:!!hasCheckedItems&&(hasCheckedItems&&!allChecked)}),(0,jsx_runtime.jsx)("div",{className:"sui-checkbox__group-body",children:react.Children.map(children,((child,index)=>{const chekboxInitialId=child?.props?.id,initialIsChecked=child?.props?.isChecked,checkboxId=chekboxInitialId||`sui-checkbox-item-${uuid}-${index}`,currItem=items.find((i=>i.id===checkboxId&&i.groupId===checkboxGroupId));return(0,react.cloneElement)(child,{...commonCheckboxProps,id:checkboxId,...child?.props,groupId:checkboxGroupId,isChecked:isFirstRender?initialIsChecked:!!currItem?.isChecked})}))})]})},CheckboxGroup=({id,children,title="group title",hasSubItems=!0,isInline=!1,commonCheckboxProps={},onChange=()=>{},_isMultiGroup=!1,...styleProps})=>((content=null)=>_isMultiGroup?content:(0,jsx_runtime.jsx)(CheckboxProvider,{onChange,children:content}))((0,jsx_runtime.jsx)(CheckboxGroupInner,{id,title,commonCheckboxProps:commonCheckboxProps??{},hasSubItems:hasSubItems??!1,isInline:isInline??!1,...styleProps,children})),CheckBoxGroups=({children,commonCheckboxProps={},onChange=()=>{},_style})=>{const{suiInlineClassname}=(0,sui_hooks_src.IS)(_style),className=(0,src.eX)("sui-checkbox-wrapper",{},suiInlineClassname);return(0,jsx_runtime.jsx)(CheckboxProvider,{onChange,children:(0,jsx_runtime.jsx)("div",{className,children:react.Children.map(children,(child=>(0,react.cloneElement)(child,{commonCheckboxProps:{...commonCheckboxProps,...child?.props?.commonCheckboxProps},_isMultiGroup:!0})))})})}},"./packages/react/elements/sui-checkbox/stories/Checkbox.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Playground:()=>Playground,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Checkbox_stories});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/react/index.js"),src=__webpack_require__("./packages/react/elements/sui-checkbox/src/index.ts"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),sui_docs_src=__webpack_require__("./packages/docs/sui-docs/src/index.ts"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const anatomy_namespaceObject=__webpack_require__.p+"static/media/anatomy.be294e4e.svg",checkbox_group_namespaceObject=__webpack_require__.p+"static/media/checkbox-group.fa278c23.svg",nested_checkbox_namespaceObject=__webpack_require__.p+"static/media/nested-checkbox.857f1c56.svg",disabled_checkbox_namespaceObject=__webpack_require__.p+"static/media/disabled-checkbox.31ab1770.svg",interactive_state_namespaceObject=__webpack_require__.p+"static/media/interactive-state.0ef04f81.svg",error_state_namespaceObject=__webpack_require__.p+"static/media/error-state.3390ed21.svg",size_namespaceObject=__webpack_require__.p+"static/media/size.3180e895.svg",alignment_namespaceObject=__webpack_require__.p+"static/media/alignment.e43d3a90.svg",helper_text_namespaceObject=__webpack_require__.p+"static/media/helper-text.50d7f229.svg",state_namespaceObject=__webpack_require__.p+"static/media/state.fa4e3170.svg",indeterminate_namespaceObject=__webpack_require__.p+"static/media/indeterminate.9b1841e7.svg";function _createMdxContent(props){const _components=Object.assign({p:"p",a:"a"},(0,lib.RP)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(sui_docs_src.wn,{title:"Anatomy",border:!0,children:(0,jsx_runtime.jsxs)(sui_docs_src.fI,{children:[(0,jsx_runtime.jsxs)(sui_docs_src.fv,{children:[(0,jsx_runtime.jsx)("h3",{style:{marginTop:0},children:"1. Checkbox input"}),(0,jsx_runtime.jsx)("p",{children:"The checkbox input is the actual interactive element that users can click or tap to select or deselect an option. It is typically represented as a small square or rectangle that can be checked (selected) or unchecked (deselected)."}),(0,jsx_runtime.jsx)("h3",{children:"2. Checkbox label"}),(0,jsx_runtime.jsx)("p",{children:"The label is the text or description associated with the checkbox. It provides context to the user about what the checkbox represents. Labels should be clear, concise, and easy to understand."})]}),(0,jsx_runtime.jsx)(sui_docs_src.fv,{children:(0,jsx_runtime.jsx)("img",{src:anatomy_namespaceObject,alt:"Checkbox Anatomy"})})]})}),"\n",(0,jsx_runtime.jsx)(sui_docs_src.wn,{title:"Checkbox Group",border:!0,children:(0,jsx_runtime.jsxs)(sui_docs_src.fI,{children:[(0,jsx_runtime.jsxs)(sui_docs_src.fv,{children:[(0,jsx_runtime.jsx)("p",{children:(0,jsx_runtime.jsx)(_components.p,{children:"Checkboxes are often used in groups when users need to select multiple options from a list. The checkboxes within a group should be visually grouped together, often by placing them within a list."})}),(0,jsx_runtime.jsx)("h3",{style:{marginTop:0},children:"1. Group Label"}),(0,jsx_runtime.jsx)("p",{children:"The field label act as the group label in the checkbox group. It explains what options need to be selected."}),(0,jsx_runtime.jsx)("h3",{style:{marginTop:0},children:"2. Checkbox List"}),(0,jsx_runtime.jsx)("p",{children:"The checkbox list is a group of multiple options that are available for the user to select."})]}),(0,jsx_runtime.jsx)(sui_docs_src.fv,{children:(0,jsx_runtime.jsx)("img",{src:checkbox_group_namespaceObject,alt:"Checkbox Group"})})]})}),"\n",(0,jsx_runtime.jsx)(sui_docs_src.wn,{title:"Nested Checkbox",border:!0,children:(0,jsx_runtime.jsxs)(sui_docs_src.fI,{children:[(0,jsx_runtime.jsx)(sui_docs_src.fv,{children:(0,jsx_runtime.jsx)("p",{children:(0,jsx_runtime.jsxs)(_components.p,{children:["Nested checkboxes are used when there is hierarchical data or categories\nthat require multiple levels of selection. These checkboxes allow users\nto select or deselect options at different levels of a hierarchy. For\nthe advanced presentation of nested selections, use ",(0,jsx_runtime.jsx)(_components.a,{href:"/docs/sui-components-advanced-tree-view--docs",children:"Tree\nview"})," component."]})})}),(0,jsx_runtime.jsx)(sui_docs_src.fv,{children:(0,jsx_runtime.jsx)("img",{src:nested_checkbox_namespaceObject,alt:"Nested Checkbox"})})]})}),"\n",(0,jsx_runtime.jsxs)(sui_docs_src.wn,{title:"States",border:!0,children:[(0,jsx_runtime.jsxs)(sui_docs_src.fI,{children:[(0,jsx_runtime.jsxs)(sui_docs_src.fv,{children:[(0,jsx_runtime.jsx)("h3",{style:{marginTop:0},children:"1. Unchecked"}),(0,jsx_runtime.jsx)("p",{children:"By default checkbox is not selected. When the checkbox is not selected, it is typically empty or displays an empty box."}),(0,jsx_runtime.jsx)("h3",{style:{marginTop:0},children:"2. Checked"}),(0,jsx_runtime.jsx)("p",{children:"When the checkbox is selected, it typically displays a checkmark (✔) inside the box with filled color to indicate the selected state."})]}),(0,jsx_runtime.jsx)(sui_docs_src.fv,{children:(0,jsx_runtime.jsx)("img",{src:state_namespaceObject,alt:"Checkbox States"})})]}),(0,jsx_runtime.jsxs)(sui_docs_src.fI,{children:[(0,jsx_runtime.jsxs)(sui_docs_src.fv,{children:[(0,jsx_runtime.jsx)("h3",{style:{marginTop:0},children:"3. Indeterminate"}),(0,jsx_runtime.jsx)("p",{children:"An indeterminate checkbox is a special state for checkboxes commonly used when dealing with lists or groups of checkboxes. It indicates that not all items in the group are checked, but some are, and it provides a visual cue to the user. This state is particularly useful when you have a hierarchical or multi-select structure where there's a mix of checked and unchecked checkboxes within a parent category or group."})]}),(0,jsx_runtime.jsx)(sui_docs_src.fv,{children:(0,jsx_runtime.jsx)("img",{src:indeterminate_namespaceObject,alt:"Indeterminated Checkbox"})})]}),(0,jsx_runtime.jsxs)(sui_docs_src.fI,{children:[(0,jsx_runtime.jsxs)(sui_docs_src.fv,{children:[(0,jsx_runtime.jsx)("h3",{style:{marginTop:0},children:"4. Disabled"}),(0,jsx_runtime.jsx)("p",{children:"Checkboxes can also be in a disabled state, where users cannot interact with them. Disabled checkboxes are typically grayed out or have reduced opacity to indicate their inactive status."})]}),(0,jsx_runtime.jsx)(sui_docs_src.fv,{children:(0,jsx_runtime.jsx)("img",{src:disabled_checkbox_namespaceObject,alt:"Disabled Checkbox"})})]}),(0,jsx_runtime.jsx)(sui_docs_src.fI,{children:(0,jsx_runtime.jsx)(sui_docs_src.fv,{children:(0,jsx_runtime.jsx)("img",{src:interactive_state_namespaceObject,alt:"Checkbox Interactive State"})})})]}),"\n",(0,jsx_runtime.jsxs)(sui_docs_src.wn,{title:"Error State",border:!0,children:[(0,jsx_runtime.jsx)(_components.p,{children:"Error can be shown in two ways for checkbox."}),(0,jsx_runtime.jsx)("h3",{style:{marginTop:0},children:"1. Forms or form field"}),(0,jsx_runtime.jsx)("p",{children:"If the checkbox is used within the forms or inside the group of form fields, the error should be similar to the input field."}),(0,jsx_runtime.jsx)("h3",{style:{marginTop:0},children:"2. Setting blocks"}),(0,jsx_runtime.jsxs)("p",{children:["If the checkbox is used in separate setting block or it require user's attention, error can be shown with the ",(0,jsx_runtime.jsx)(_components.a,{href:"/docs/sui-components-advanced-alert-banner--docs",children:"Alert Notification"}),"."]}),(0,jsx_runtime.jsx)("img",{src:error_state_namespaceObject,alt:"Checkbox Error State"})]}),"\n",(0,jsx_runtime.jsxs)(sui_docs_src.wn,{title:"Modifiers",border:!0,children:[(0,jsx_runtime.jsxs)(sui_docs_src.fI,{children:[(0,jsx_runtime.jsxs)(sui_docs_src.fv,{children:[(0,jsx_runtime.jsx)("h3",{style:{marginTop:0},children:"1. Size"}),(0,jsx_runtime.jsxs)("p",{children:["The SUI 3 ",(0,jsx_runtime.jsx)(sui_docs_src.Cy,{small:!0,children:"Checkbox"})," component is available in two sizes: ",(0,jsx_runtime.jsx)("strong",{children:"default"})," and ",(0,jsx_runtime.jsx)("strong",{children:"small"}),". Choose the appropriate size based on your layout and use case requirements."]})]}),(0,jsx_runtime.jsx)(sui_docs_src.fv,{children:(0,jsx_runtime.jsx)("img",{src:size_namespaceObject,alt:"Checkbox Size"})})]}),(0,jsx_runtime.jsxs)(sui_docs_src.fI,{children:[(0,jsx_runtime.jsxs)(sui_docs_src.fv,{children:[(0,jsx_runtime.jsx)("h3",{style:{marginTop:0},children:"2. Alignment"}),(0,jsx_runtime.jsxs)("p",{children:["The SUI 3 ",(0,jsx_runtime.jsx)(sui_docs_src.Cy,{small:!0,children:"Checkbox"})," component supports two alignment options: ",(0,jsx_runtime.jsx)("strong",{children:"horizontal"})," and ",(0,jsx_runtime.jsx)("strong",{children:"vertical"}),". Choose the alignment that best fits your layout and design requirements."]})]}),(0,jsx_runtime.jsx)(sui_docs_src.fv,{children:(0,jsx_runtime.jsx)("img",{src:alignment_namespaceObject,alt:"Checkbox Alignment"})})]}),(0,jsx_runtime.jsxs)(sui_docs_src.fI,{children:[(0,jsx_runtime.jsxs)(sui_docs_src.fv,{children:[(0,jsx_runtime.jsx)("h3",{style:{marginTop:0},children:"3. Helper Text"}),(0,jsx_runtime.jsxs)("p",{children:["The SUI 3 ",(0,jsx_runtime.jsx)(sui_docs_src.Cy,{small:!0,children:"Checkbox"})," component supports helper text to provide additional context or instructions to users. Helper text can be used to clarify the purpose of the checkbox or provide guidance on how to use a group of checkboxes."]})]}),(0,jsx_runtime.jsx)(sui_docs_src.fv,{children:(0,jsx_runtime.jsx)("img",{src:helper_text_namespaceObject,alt:"Checkbox Helper Text"})})]})]})]})}const TabUsage=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.RP)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)};function TabSingle_createMdxContent(props){const _components=Object.assign({p:"p"},(0,lib.RP)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(sui_docs_src._3,{packageName:"@wpmudev/sui-checkbox"}),"\n",(0,jsx_runtime.jsxs)(sui_docs_src.wn,{title:"Checkbox Props",border:!0,children:[(0,jsx_runtime.jsxs)(_components.p,{children:["Use the ",(0,jsx_runtime.jsx)(sui_docs_src.Cy,{children:"Checkbox"})," component to create a checkbox input. It can be used as a standalone checkbox or as part of a group of checkboxes. It has the following props:"]}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"id",type:"string",children:(0,jsx_runtime.jsx)(_components.p,{children:"A unique identifier for the checkbox, within group context this will be generated automatically."})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"name",type:"string",children:(0,jsx_runtime.jsx)(_components.p,{children:"Represents the name of the input checkbox."})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"value",type:"string",children:(0,jsx_runtime.jsx)(_components.p,{children:"Represents the value of the input checkbox."})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"label",type:"string",children:(0,jsx_runtime.jsx)(_components.p,{children:"The text label for the checkbox."})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"isLabelHidden",type:"boolean",defaultValue:"false",children:(0,jsx_runtime.jsx)(_components.p,{children:"Indicates whether the label should be hidden or not."})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"isSmall",type:"boolean",defaultValue:"false",children:(0,jsx_runtime.jsxs)(_components.p,{children:["if set to ",(0,jsx_runtime.jsx)(sui_docs_src.Cy,{isSmall:!0,children:"true"})," the checkbox will have a smaller size."]})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"isDisabled",type:"boolean",defaultValue:"false",children:(0,jsx_runtime.jsx)(_components.p,{children:"Indicates whether the checkbox is disabled or not."})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"isError",type:"boolean",defaultValue:"false",children:(0,jsx_runtime.jsx)(_components.p,{children:"Indicates if the checkbox has an error."})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"isIndeterminate",type:"boolean",defaultValue:"false",children:(0,jsx_runtime.jsxs)(_components.p,{children:["Mark checkbox checked as indeterminate, for more information checkout the ",(0,jsx_runtime.jsx)("a",{target:"_blank",href:"/?path=/docs/sui-components-forms-checkbox--docs",children:"Usage Page"})]})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"isChecked",type:"boolean",defaultValue:"false",children:(0,jsx_runtime.jsxs)(_components.p,{children:["Default value for the checkbox, when set to ",(0,jsx_runtime.jsx)(sui_docs_src.Cy,{small:!0,children:"true"})," the Checkbox will be checked initially."]})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"onChange",type:"function",children:(0,jsx_runtime.jsx)(_components.p,{children:"A callback function to be invoked when the checkbox state is changed."})}),(0,jsx_runtime.jsx)(sui_docs_src.il,{})]}),"\n",(0,jsx_runtime.jsx)(sui_docs_src.oW,{})]})}const TabSingle=function TabSingle_MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.RP)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(TabSingle_createMdxContent,props)})):TabSingle_createMdxContent(props)};function TabGroup_createMdxContent(props){const _components=Object.assign({p:"p"},(0,lib.RP)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(sui_docs_src._3,{packageName:"@wpmudev/sui-checkbox"}),"\n",(0,jsx_runtime.jsxs)(sui_docs_src.wn,{title:"CheckboxGroup Props",border:!0,style:{paddingBottom:0},children:[(0,jsx_runtime.jsxs)(_components.p,{children:["Use the ",(0,jsx_runtime.jsx)("code",{children:"CheckboxGroup"})," component to group multiple checkboxes together and display them horizontally or vertically, it has the following props:"]}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"id",type:"string",children:(0,jsx_runtime.jsx)(_components.p,{children:"A unique identifier for the checkbox group, within group context this will be generated automatically if not passed"})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"children",type:"React Node",children:(0,jsx_runtime.jsx)(_components.p,{children:"The elements content of the component"})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"title",type:"string",defaultValue:"group title",children:(0,jsx_runtime.jsx)(_components.p,{children:"Represents the group checkbox label"})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"hasSubItems",type:"boolean",defaultValue:"true",children:(0,jsx_runtime.jsx)(_components.p,{children:"Whether the group has chldren checkboxes"})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"isInline",type:"boolean",defaultValue:"false",children:(0,jsx_runtime.jsxs)(_components.p,{children:["When set to ",(0,jsx_runtime.jsx)(sui_docs_src.Cy,{isSmall:!0,children:"true"})," the checkboxes will be displayed horizontally"]})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"commonCheckboxProps",type:"object",children:(0,jsx_runtime.jsxs)(_components.p,{children:["The common checkbox props to be shared with all children checkboxes, accepted props are detailed in the ",(0,jsx_runtime.jsx)(sui_docs_src.Cy,{isSmall:!0,children:"Checkbox"})," section."]})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"onChange",type:"function",children:(0,jsx_runtime.jsx)(_components.p,{children:"Callback function to be executed when the state of any checkbox in the group is changed, the first parameter returns the state of all checkboxes in an array structure"})})]}),"\n",(0,jsx_runtime.jsx)(sui_docs_src.oW,{})]})}const TabGroup=function TabGroup_MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.RP)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(TabGroup_createMdxContent,props)})):TabGroup_createMdxContent(props)};function TabNesting_createMdxContent(props){const _components=Object.assign({p:"p"},(0,lib.RP)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(sui_docs_src._3,{packageName:"@wpmudev/sui-checkbox"}),"\n",(0,jsx_runtime.jsxs)(sui_docs_src.wn,{title:"CheckboxGroups Props",border:!0,style:{paddingBottom:0},children:[(0,jsx_runtime.jsxs)(_components.p,{children:["Use the ",(0,jsx_runtime.jsx)("code",{children:"CheckboxGroups"})," component to create hierarchical structure with nested checkboxes, it has the following props:"]}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"children",type:"React Node",children:(0,jsx_runtime.jsx)(_components.p,{children:"The elements children of the the component"})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"commonCheckboxProps",type:"object",children:(0,jsx_runtime.jsxs)(_components.p,{children:["The common checkbox props to be shared with all children checkboxes, accepted props are detailed in the ",(0,jsx_runtime.jsx)(sui_docs_src.Cy,{isSmall:!0,children:"Checkbox"})," section."]})}),(0,jsx_runtime.jsx)(sui_docs_src.hz,{title:"onChange",type:"function",children:(0,jsx_runtime.jsx)(_components.p,{children:"Callback function to be executed when the state of any checkbox in the group is changed, the first parameter returns the state of all checkboxes in an array structure"})})]}),"\n",(0,jsx_runtime.jsx)(sui_docs_src.oW,{})]})}const TabNesting=function TabNesting_MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.RP)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(TabNesting_createMdxContent,props)})):TabNesting_createMdxContent(props)};function checkbox_createMdxContent(props){return(0,jsx_runtime.jsx)(dist.di,{children:(0,jsx_runtime.jsxs)(sui_docs_src.g2,{title:"Checkbox",subtitle:"Checkboxes are used to allow users to make binary choices or select one or more options from a list.",status:"ready",children:[(0,jsx_runtime.jsx)("div",{id:"usage",label:"Usage",children:(0,jsx_runtime.jsx)(TabUsage,{})}),(0,jsx_runtime.jsx)("div",{id:"single",label:"Single",children:(0,jsx_runtime.jsx)(TabSingle,{})}),(0,jsx_runtime.jsx)("div",{id:"group",label:"Group",children:(0,jsx_runtime.jsx)(TabGroup,{})}),(0,jsx_runtime.jsx)("div",{id:"group",label:"Nesting",children:(0,jsx_runtime.jsx)(TabNesting,{})})]})})}const stories_checkbox=function checkbox_MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.RP)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(checkbox_createMdxContent,props)})):checkbox_createMdxContent()},Checkbox_stories={title:"SUI/Components/Forms/Checkbox",component:src.Sc,parameters:{layout:"fullscreen",docs:{page:stories_checkbox}}},Playground=({example,name,isInline,...args})=>{const[isChecked,setIsChecked]=(0,react.useState)(!1);return(0,jsx_runtime.jsx)("div",{className:"sui-layout sui-layout--horizontal sui-layout--vertical",children:(0,jsx_runtime.jsx)("div",{className:"sui-layout__content",children:(0,jsx_runtime.jsx)("div",{style:{padding:20,borderRadius:4,background:"#fff"},children:{single:(0,jsx_runtime.jsx)(src.Sc,{name:"single-checkbox",id:"single-checkbox",label:"Single Checkbox",isChecked,onChange:e=>{setIsChecked(e.target.checked)},...args}),group:(0,jsx_runtime.jsxs)(src.$Q,{title:"Group 1 Label",id:"group-1",commonCheckboxProps:{name:"group-checkbox",...args},children:[(0,jsx_runtime.jsx)(src.Sc,{id:"checkbox-1",label:"Checkbox Group Item 1"}),(0,jsx_runtime.jsx)(src.Sc,{id:"checkbox-2",label:"Checkbox Group Item 2"})]}),nested:(0,jsx_runtime.jsxs)(src.Eh,{commonCheckboxProps:{name:"groups-checkbox",...args},children:[(0,jsx_runtime.jsxs)(src.$Q,{title:"Nested Group 1",hasSubItems:!0,commonCheckboxProps:{},children:[(0,jsx_runtime.jsx)(src.Sc,{id:"checkbox-1",isChecked:!0,label:"Nested item 1"}),(0,jsx_runtime.jsx)(src.Sc,{id:"checkbox-2",label:"Nested item 2"})]}),(0,jsx_runtime.jsxs)(src.$Q,{title:"Nested Group 2",hasSubItems:!0,commonCheckboxProps:{},children:[(0,jsx_runtime.jsx)(src.Sc,{label:"Nested item 1"}),(0,jsx_runtime.jsx)(src.Sc,{label:"Nested item 2"}),(0,jsx_runtime.jsx)(src.Sc,{label:"Nested item 3"}),(0,jsx_runtime.jsx)(src.Sc,{label:"Nested item 4"})]})]}),horizontal:(0,jsx_runtime.jsxs)(src.$Q,{title:"Group 1 Label",isInline:!0,commonCheckboxProps:{...args},children:[(0,jsx_runtime.jsx)(src.Sc,{label:"Checkbox Group Item 1"}),(0,jsx_runtime.jsx)(src.Sc,{label:"Checkbox Group Item 2"})]})}[example]})})})};Playground.args={example:"single",name:"countries",isLabelHidden:!1,isSmall:!1,isDisabled:!1,isError:!1},Playground.argTypes={example:{name:"Example",options:["single","group","nested","horizontal"],control:{type:"select",labels:{single:"Example: Single",group:"Example: Group",nested:"Example: Nested",horizontal:"Example: Horizontal"}}},name:{name:"Name",control:"text"},defaultValue:{table:{disable:!0}},isLabelHidden:{name:"Label Hidden",control:{type:"boolean"}},isSmall:{name:"Small",control:{type:"boolean"}},isDisabled:{name:"Disabled",control:{type:"boolean"}},isError:{name:"Error",control:{type:"boolean"}}},Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:'({\n  example,\n  name,\n  isInline,\n  ...args\n}: {\n  example: string;\n  name: string;\n  isInline: boolean;\n}) => {\n  const boxStyles = {\n    padding: 20,\n    borderRadius: 4,\n    background: "#fff"\n  };\n\n  // For a single checkbox (outside of CheckboxWrapper)\n  const [isChecked, setIsChecked] = useState(false);\n  return <div className="sui-layout sui-layout--horizontal sui-layout--vertical">\n            <div className="sui-layout__content">\n                <div style={boxStyles}>\n                    {{\n          single: <Checkbox name="single-checkbox" id="single-checkbox" label="Single Checkbox" isChecked={isChecked} onChange={e => {\n            setIsChecked(e.target.checked);\n          }} {...args} />,\n          group: <CheckboxGroup title="Group 1 Label" id="group-1" commonCheckboxProps={{\n            // It will be passed to all checkbox items\n            name: "group-checkbox",\n            ...args\n          }}>\n                                    <Checkbox id="checkbox-1" label="Checkbox Group Item 1" />\n                                    <Checkbox id="checkbox-2" label="Checkbox Group Item 2" />\n                                </CheckboxGroup>,\n          nested: <CheckBoxGroups commonCheckboxProps={{\n            // It will be passed to all checkbox items\n            name: "groups-checkbox",\n            ...args\n          }}>\n                                    <CheckboxGroup title="Nested Group 1" hasSubItems={true} commonCheckboxProps={{}}>\n                                        <Checkbox id="checkbox-1" isChecked={true} label="Nested item 1" />\n                                        <Checkbox id="checkbox-2" label="Nested item 2" />\n                                    </CheckboxGroup>\n                                    <CheckboxGroup title="Nested Group 2" hasSubItems={true} commonCheckboxProps={{}}>\n                                        <Checkbox label="Nested item 1" />\n                                        <Checkbox label="Nested item 2" />\n                                        <Checkbox label="Nested item 3" />\n                                        <Checkbox label="Nested item 4" />\n                                    </CheckboxGroup>\n                                </CheckBoxGroups>,\n          horizontal: <CheckboxGroup title="Group 1 Label" isInline={true} commonCheckboxProps={{\n            ...args\n          }}>\n                                    <Checkbox label="Checkbox Group Item 1" />\n                                    <Checkbox label="Checkbox Group Item 2" />\n                                </CheckboxGroup>\n        }[example]}\n                </div>\n            </div>\n        </div>;\n}',...Playground.parameters?.docs?.source}}};const __namedExportsOrder=["Playground"]}}]);